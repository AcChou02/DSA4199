daily_returns_long <- pivot_longer(daily_returns, cols = -1, names_to = "ticker", values_to = "returns")
# function to fetch the correlation matrix given start and end dates
get_cor_mat <- function(data, start_date, end_date) {
tmp <- data %>% filter(date >= start_date, date <= end_date)
return(cor(tmp[, -1]))
}
# function to get 1-ahead prediction of standard deviation given start and end dates and ticker
get_volatility <- function(data_long, stock, start_date, end_date) {
tmp <- data_long %>% filter(date >= start_date, date <= end_date, ticker == stock)
fit <- garchFit(formula = ~ garch(1, 1), data = tmp$returns, trace = FALSE)
pred <- predict(fit, n.ahead = 1)$standardDeviation[1]
return(pred)
}
start_date <- as.Date("2000-01-01")
end_date <- as.Date("2006-12-31")
# vectorize function
get_volatility <- Vectorize(get_volatility, "stock")
get_volatility(daily_returns_long, unique(daily_returns_long$ticker), start_date, end_date)
fit <- garchFit(data = daily_returns$AAPL)
pred <- predict(fit, n.ahead = 10)
View(pred)
?garchFit
fit@sigma.t
fit@sigma.t
plot(fit@sigma.t)
fit <- garchFit(data = daily_returns$AAPL[1:2000])
plot(fit@sigma.t)
fit <- garchFit(data = daily_returns$AAPL[1:2005])
plot(fit@sigma.t)
fit@sigma.t[2000]
fit <- garchFit(data = daily_returns$AAPL[1:2000])
fit@sigma.t[2000]
fit <- garchFit(data = daily_returns$AAPL[1:3000])
fit@sigma.t[2000]
fit <- garchFit(data = daily_returns$AAPL)
fit@sigma.t[2000]
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
tickers <- c("AAPL", "AMGN", "AXP", "BA", "CAT", "CRM", "CSCO", "CVX", "DIS", "DOW",
"GS", "HD", "HON", "IBM", "INTC", "JNJ", "JPM", "KO", "MCD", "MMM",
"MRK", "MSFT", "NKE", "PG", "TRV", "UNH", "V", "VZ", "WBA", "WMT")
start_date <- as.Date("2000-01-01")
end_date <- as.Date("2020-12-31")
library(quantmod)
library(tidyverse)
library(Hmisc)
library(moments)
library(reshape2)
library(fGarch)
library(keras)
library(tensorflow)
closing_prices <- lapply(tickers, function(ticker) {
getSymbols(ticker, src = 'yahoo', from = start_date, to = end_date, auto.assign = FALSE)[,6]
})
closing_prices <- as_tibble(do.call(cbind, closing_prices))
date <- index(getSymbols("AAPL", src = 'yahoo', from = start_date, to = end_date, auto.assign = FALSE))
closing_prices <- cbind(date, closing_prices)
# Remove columns with NA & clean column names
closing_prices <- closing_prices[ , colSums(is.na(closing_prices))==0]
names(closing_prices)[-1] <- substr(names(closing_prices)[-1], 1, nchar(names(closing_prices)[-1]) - 9)
# Calculate daily returns
daily_returns <- closing_prices %>%
mutate_at(vars(-1), ~log(.) - log(lag(.))) %>%
na.omit()
days <- nrow(daily_returns)
daily_returns_long <- pivot_longer(daily_returns, cols = -1, names_to = "ticker", values_to = "returns")
fit <- garchFit(data = daily_returns$AAPL[1:2000])
pred <- predict(fit, n.ahead = 10)
dates
dates <- daily_returns %>%
filter(date >= "2001-01-01") %>%
select(date) %>%
pull(1)
dates
get_garch_fit <- function(ticker, end_date) {
fit <- garchFit(data = daily_returns$AAPL)
return(fit@sigma.t[-1])
}
get_garch_fit <- function(ticker, end_date) {
fit <- garchFit(data = daily_returns$ticker)
return(fit@sigma.t[-1])
}
get_get_garch_fit("AAPL", "2004-12-21")
get_garch_fit <- function(ticker, end_date) {
fit <- garchFit(data = daily_returns$ticker)
return(fit@sigma.t[-1])
}
get_garch_fit("AAPL", "2004-12-21")
get_garch_fit <- function(ticker, end_date) {
fit <- garchFit(data = daily_returns$AAPL)
return(fit@sigma.t[-1])
}
get_garch_fit("AAPL", "2004-12-21")
get_garch_fit <- function(ticker, end_date) {
fit <- garchFit(data = daily_returns$AAPL)
return(tail(fit@sigma.t))
}
get_garch_fit("AAPL", "2004-12-21")
get_garch_fit <- function(ticker, end_date) {
fit <- garchFit(data = daily_returns$AAPL)
return(tail(fit@sigma.t, n=1))
}
?garchFit
get_garch_fit <- function(ticker, end_date) {
fit <- garchFit(data = daily_returns$AAPL, trace = FALSE)
return(tail(fit@sigma.t, n = 1))
}
get_garch_fit("AAPL", "2004-12-21")
get_garch_fit <- function(ticker, end_date) {
tmp <- data_long %>% filter(date >= start_date, date <= end_date, ticker == stock)
fit <- garchFit(formula = ~ garch(1, 1), data = tmp$returns, trace = FALSE)
return(tail(fit@sigma.t, n = 1))
}
get_garch_fit("AAPL", "2004-12-21")
get_garch_fit <- function(ticker, end_date) {
tmp <- daily_returns_long %>% filter(date >= start_date, date <= end_date, ticker == stock)
fit <- garchFit(formula = ~ garch(1, 1), data = tmp$returns, trace = FALSE)
return(tail(fit@sigma.t, n = 1))
}
get_garch_fit("AAPL", "2004-12-21")
get_garch_fit <- function(stock, end_date) {
tmp <- daily_returns_long %>% filter(date <= end_date, ticker == stock)
fit <- garchFit(formula = ~ garch(1, 1), data = tmp$returns, trace = FALSE)
return(tail(fit@sigma.t, n = 1))
}
get_garch_fit("AAPL", "2004-12-21")
get_garch_fit <- function(stock, end_date) {
tmp <- daily_returns_long %>% filter(date <= end_date, ticker == stock)
fit <- garchFit(formula = ~ garch(1, 1), data = tmp$returns, trace = FALSE)
return(tail(fit@sigma.t, n = 1))
}
get_garch_fit("AAPL", "2004-12-21")
garch_fit_results <- data.frame(
date = as.Date(character()),
ticker = character(),
fitted_sigma = double()
)
dates_test <- dates[1:10]
for (d in dates_test) {
x <- get_garch_fit("AAPL", d)
garch_fit_results[nrow(garch_fit_results) + 1,] <- c(d, "AAPL", x)
}
?as.Date
garch_fit_results <- data.frame(
date = as.Date(character()),
ticker = character(),
fitted_sigma = double()
)
dates_test <- dates[1:10]
for (d in dates_test) {
x <- get_garch_fit("AAPL", d)
garch_fit_results[nrow(garch_fit_results) + 1,] <- c(d, "AAPL", x)
}
?charToDate
garch_fit_results <- data.frame(
date = character(),
ticker = character(),
fitted_sigma = double()
)
dates_test <- dates[1:10]
for (d in dates_test) {
x <- get_garch_fit("AAPL", d)
garch_fit_results[nrow(garch_fit_results) + 1,] <- c(d, "AAPL", x)
}
View(garch_fit_results)
dates
as.Date(11446)
garch_fit_results <- data.frame(
date = as.Date(integer()),
ticker = character(),
fitted_sigma = double()
)
dates_test <- dates[1:10]
for (d in dates_test) {
x <- get_garch_fit("AAPL", d)
garch_fit_results[nrow(garch_fit_results) + 1,] <- c(d, "AAPL", x)
}
garch_fit_results <- data.frame(
date = integer(),
ticker = character(),
fitted_sigma = double()
)
dates_test <- dates[1:10]
for (d in dates_test) {
x <- get_garch_fit("AAPL", d)
garch_fit_results[nrow(garch_fit_results) + 1,] <- c(d, "AAPL", x)
}
garch_fit_results <- data.frame(
date = integer(),
ticker = character(),
fitted_sigma = double()
)
#dates_test <- dates[1:10]
for (d in dates) {
x <- get_garch_fit("AAPL", d)
garch_fit_results[nrow(garch_fit_results) + 1,] <- c(d, "AAPL", x)
}
garch_fit_results
#dates_test <- dates[1:10]
for (d in dates) {
x <- get_garch_fit("DIS", d)
garch_fit_results[nrow(garch_fit_results) + 1,] <- c(d, "DIS", x)
}
garch_fit_results
write.csv(garch_fit_results, "garch_fit_results_AAPL_DIS.csv")
x <- rnorm(1000)
mean(x^2)
x <- rnorm(1000)
mean(x^2)
x <- rnorm(1e6)
mean(x^2)
mean(x)
install.packages("MASS")
library(MASS)
R <- matrix(c(1, 0.34,
0.34, 1),
nrow = 2, ncol = 2, byrow = TRUE)
mu <- c(X = 0, Y = 0)
x <- MASS::mvrnorm(1e6, mu = mu, Sigma = R)
head(x)
cor(x)
x.X
x[0]
x[[0]]
x[X]
x['X']
type(x)
dtype(x)
class(x)
rowMeans(apply(x, 1, function(row) sum(row * row))^2)
rowMeans(apply(x, 1, function(row) sum(row * row))^2)
x
rowMeans(apply(x, 1, function(row) sum(row * row))^2)
class(x)
dim(x)
rowMeans(apply(x, 1, function(row) sum(row * row))^2)
x <- df(x)
x <- data.frame(x)
rowMeans(apply(x, 1, function(row) sum(row * row))^2)
?rowMeans
Sys.setenv(LANG = "en")
rowMeans(apply(x, 1, function(row) sum(row * row))^2)
dim(x)
rowMeans(matrix(apply(x, 1, function(row) sum(row * row))^2, ncol = 1))
X <- x[0]
View(X)
X <- x[0, ]
X <- x[, 1]
Y <- x[, 2]
mean((X * Y)^2)
# Check if the 10th item is in the 40th position
if (x[40] == x10) {
count <- count + 1
}
# Run the simulation
for (i in 1:n) {
# Generate a random vector of length 50
x <- sample(1:50, 50, replace = TRUE)
x10 <- x[10]
# Sort the vector twice
x <- bubble_sort(x)
# Check if the 10th item is in the 40th position
if (x[40] == x10) {
count <- count + 1
}
}
# Define a function to simulate bubble sort
bubble_sort <- function(x) {
n <- length(x)
for (i in 1:2) {
for (j in 1:(n - i)) {
if (x[j] > x[j + 1]) {
temp <- x[j]
x[j] <- x[j + 1]
x[j + 1] <- temp
}
}
}
return(x)
}
# Set the number of iterations
n <- 10000
# Initialize a counter
count <- 0
# Run the simulation
for (i in 1:n) {
# Generate a random vector of length 50
x <- sample(1:50, 50, replace = TRUE)
x10 <- x[10]
# Sort the vector twice
x <- bubble_sort(x)
# Check if the 10th item is in the 40th position
if (x[40] == x10) {
count <- count + 1
}
}
# Calculate the probability
prob <- count / n
# Print the result
cat("The probability of the 10th item ending up in the 40th position after two iterations of bubble sort is", round(prob, 4), ".")
# Define a function to simulate bubble sort
bubble_sort <- function(x) {
n <- length(x)
for (i in 1:1) {
for (j in 1:(n - i)) {
if (x[j] > x[j + 1]) {
temp <- x[j]
x[j] <- x[j + 1]
x[j + 1] <- temp
}
}
}
return(x)
}
# Set the number of iterations
n <- 1000000
# Initialize a counter
count <- 0
# Run the simulation
for (i in 1:n) {
# Generate a random vector of length 50
x <- sample(1:50, 50, replace = TRUE)
x10 <- x[10]
# Sort the vector twice
x <- bubble_sort(x)
# Check if the 10th item is in the 40th position
if (x[40] == x10) {
count <- count + 1
}
}
# Calculate the probability
prob <- count / n
# Print the result
cat("The probability of the 10th item ending up in the 40th position after two iterations of bubble sort is", round(prob, 4), ".")
# Generate a random vector of length 50
x <- sample(1:50, 50, replace = TRUE)
x <- c(3, 1, 5, 4, 2)
bubble_sort(x)
# Define a function to simulate bubble sort
bubble_sort <- function(x) {
n <- length(x)
for (i in 1:1) {
for (j in 1:(n - i)) {
if (x[j] > x[j + 1]) {
temp <- x[j]
x[j] <- x[j + 1]
x[j + 1] <- temp
}
}
}
return(x)
}
# Set the number of iterations
n <- 10000
# Initialize a counter
count <- 0
# Run the simulation
for (i in 1:n) {
# Generate a random vector of length 50
x <- sample(1:50, 50, replace = TRUE)
x10 <- x[10]
# Sort the vector twice
x <- bubble_sort(x)
# Check if the 10th item is in the 40th position
if (x[40] == x10) {
count <- count + 1
}
}
# Calculate the probability
prob <- count / n
# Print the result
cat("The probability of the 10th item ending up in the 40th position after two iterations of bubble sort is", round(prob, 4), ".")
# Generate a random vector of length 50
x <- sample(1:50, 50, replace = TRUE)
# Sort the vector twice
x <- bubble_sort(x)
# Sort the vector twice
x <- bubble_sort(x)
# Sort the vector twice
x <- bubble_sort(x)
# Sort the vector twice
x <- bubble_sort(x)
# Sort the vector twice
x <- bubble_sort(x)
# Sort the vector twice
x <- bubble_sort(x)
# Sort the vector twice
x <- bubble_sort(x)
# Sort the vector twice
x <- bubble_sort(x)
# Sort the vector twice
x <- bubble_sort(x)
# Define a function to simulate bubble sort
bubble_sort <- function(x) {
n <- length(x)
for (i in 1:1) {
for (j in 1:(n - i)) {
if (x[j] > x[j + 1]) {
temp <- x[j]
x[j] <- x[j + 1]
x[j + 1] <- temp
}
}
}
return(x)
}
# Set the number of iterations
n <- 10000
# Initialize a counter
count <- 0
# Run the simulation
for (i in 1:n) {
# Generate a random vector of length 50
x <- sample(1:50, 50, replace = FALSE)
x10 <- x[10]
# Sort the vector twice
x <- bubble_sort(x)
# Check if the 10th item is in the 40th position
if (x[40] == x10) {
count <- count + 1
}
}
# Calculate the probability
prob <- count / n
# Print the result
cat("The probability of the 10th item ending up in the 40th position after two iterations of bubble sort is", round(prob, 4), ".")
# Define a function to simulate bubble sort
bubble_sort <- function(x) {
n <- length(x)
for (i in 1:2) {
for (j in 1:(n - i)) {
if (x[j] > x[j + 1]) {
temp <- x[j]
x[j] <- x[j + 1]
x[j + 1] <- temp
}
}
}
return(x)
}
# Set the number of iterations
n <- 10000
# Initialize a counter
count <- 0
# Run the simulation
for (i in 1:n) {
# Generate a random vector of length 50
x <- sample(1:50, 50, replace = FALSE)
x10 <- x[10]
# Sort the vector twice
x <- bubble_sort(x)
# Check if the 10th item is in the 40th position
if (x[40] == x10) {
count <- count + 1
}
}
# Calculate the probability
prob <- count / n
# Print the result
cat("The probability of the 10th item ending up in the 40th position after two iterations of bubble sort is", round(prob, 4), ".")
# Set the number of iterations
n <- 1e6
# Initialize a counter
count <- 0
# Run the simulation
for (i in 1:n) {
# Generate a random vector of length 50
x <- sample(1:50, 50, replace = FALSE)
x10 <- x[10]
# Sort the vector twice
x <- bubble_sort(x)
# Check if the 10th item is in the 40th position
if (x[40] == x10) {
count <- count + 1
}
}
# Calculate the probability
prob <- count / n
# Print the result
cat("The probability of the 10th item ending up in the 40th position after two iterations of bubble sort is", round(prob, 4), ".")
0.001141
1/820
# Set the number of iterations
n <- 1e8
# Initialize a counter
count <- 0
# Run the simulation
for (i in 1:n) {
# Generate a random vector of length 50
x <- sample(1:50, 50, replace = FALSE)
x10 <- x[10]
# Sort the vector twice
x <- bubble_sort(x)
# Check if the 10th item is in the 40th position
if (x[40] == x10) {
count <- count + 1
}
}
count
n
i
count/i
i/count
1/860
q <= count/i
q <- count/i
sqrt(q * (1-q) / count)
q
sqrt(q * (1-q) / i)
1/820
1/840
1/860
1/880
